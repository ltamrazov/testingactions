name: ci

on:
    push:
        branches: [ master ]
    pull_request:
        branches: [ master ]

env:
    DB_CACHE: /tmp/.buildx-cache/db
    MAIN_CACHE: /tmp/.buildx-cache/main
jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
    - name: Builder
      uses: docker/setup-buildx-action@v1
      id: buildx

    - name: Cache main image layers
      uses: actions/cache@v2
      with:
        path: ${{ env.MAIN_CACHE }}
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Cache db image layers
      uses: actions/cache@v2
      with:
        path: ${{ env.DB_CACHE }}
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Checkout Code
      uses: actions/checkout@v2
    
    - name: Temp tags
      id: tmpimg
      run: |
        MAIN_TAG="main-$GITHUB_SHA"
        DB_TAG="db-$GITHUB_SHA"
        echo ::set-output name=mainimg::${MAIN_TAG}
        echo ::set-output name=dbimg::${DB_TAG}

    - name: Build source
      uses: docker/build-push-action@v2
      with:
        builder: ${{ steps.buildx.outputs.name }}
        push: false
        target: build
        load: true
        cache-from: type=local,src=${{ env.MAIN_CACHE }}
        cache-to: type=local,mode=max,dest=${{ env.MAIN_CACHE }}
        tags: ${{ steps.tmpimg.outputs.mainimg }}
    
    - name: Build DB
      uses: docker/build-push-action@v2
      with:
        builder: ${{ steps.buildx.outputs.name }}
        file: Dockerfile.postgres
        load: true
        cache-from: type=local,src=${{ env.DB_CACHE }}
        cache-to: type=local,mode=max,dest=${{ env.DB_CACHE }}
        tags: ${{ steps.tmpimg.outputs.dbimg }}
    
    - name: Run Tests
      run: |
        API_IMAGE_TAG=${{ steps.tmpimg.outputs.mainimg }} DB_IMAGE_TAG=${{ steps.tmpimg.outputs.dbimg }} docker-compose -f docker-compose.yml --env-file .env.ci run test-api
  
  push-image:
    needs: [build-test]
    runs-on: ubuntu-latest
    steps:
    - name: Builder
      uses: docker/setup-buildx-action@v1
      id: buildx

    - name: Prepare
      id: prep
      run: |
        DOCKER_IMAGE=ghcr.io/${{ github.repository_owner }}/${{github.repository}}/api
        TAGS="$DOCKER_IMAGE:sha-${GITHUB_SHA::8}"
        if [[ $GITHUB_REF == refs/pull/* ]]; then
          TAGS="$TAGS,$DOCKER_IMAGE:pr-${{ github.event.number }}"
        elif [ "${{ github.event_name }}" = "push" ]; then
          TAGS="$TAGS:latest"
        fi
        echo ::set-output name=image::${TAGS}

    - name: Restore cache
      uses: actions/cache@v2
      with:
        path: ${{ env.MAIN_CACHE }}
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.DOCKER_PAT }}
    
    - name: Build code
      uses: docker/build-push-action@v2
      with:
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        target: release
        cache-from: type=local,src=${{ env.MAIN_CACHE }}
        cache-to: type=local,mode=max,dest=${{ env.MAIN_CACHE }}
        tags: ${{ steps.prep.outputs.image }}