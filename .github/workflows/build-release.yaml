name: release

on:
  pull_request:
    branches: [ master ]
    types: ['labeled']

env:
  BUILD_IMAGE: "ghcr.io/${{github.repository}}:tmp.api.${{ github.sha }}"
  MAIN_CACHE_PATH: /tmp/.buildx-cache/main  

jobs:
  cancel-previous-workflows:
    runs-on: ubuntu-latest
    steps:
      - name: Block concurrent deploys
        uses: softprops/turnstyle@v1
        with:
            abort-after-seconds: 1
            poll-interval-seconds: 1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: [cancel-previous-workflows]
    steps:
    - name: sleep
      run: sleep 180

  #   - name: Builder
  #     uses: docker/setup-buildx-action@v1
  #     id: buildx

  #   - name: Restore build cache
  #     uses: actions/cache@v2
  #     with:
  #       path: ${{ env.MAIN_CACHE_PATH }}
  #       key: ${{ runner.os }}-buildx-main-${{ github.sha }}
  #       restore-keys: |
  #         ${{ runner.os }}-buildx-main-
    
  #   - name: Temp tags
  #     id: tmpimg
  #     run: |
  #       MAIN_TAG="main-$GITHUB_SHA"
  #       DB_TAG="db-$GITHUB_SHA"
  #       echo ::set-output name=mainimg::${MAIN_TAG}
  #       echo ::set-output name=dbimg::${DB_TAG}

  #   - name: Login to GitHub Container Registry
  #     uses: docker/login-action@v1
  #     with:
  #       registry: ghcr.io
  #       username: ${{ github.repository_owner }}
  #       password: ${{ secrets.DOCKER_PAT }}

  #   - name: Build source
  #     uses: docker/build-push-action@v2
  #     with:
  #       builder: ${{ steps.buildx.outputs.name }}
  #       target: build
  #       push: true
  #       cache-from: type=local,src=${{ env.MAIN_CACHE_PATH }}
  #       cache-to: type=local,mode=max,dest=${{ env.MAIN_CACHE_PATH }}
  #       tags: ${{ env.BUILD_IMAGE }}
  
  # test:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   env:
  #     DB_CACHE_PATH: /tmp/.buildx-cache/db
  #     DB_IMAGE_TAG: "tmp/db:${{ github.sha }}"
  #   steps:
  #   - name: Builder
  #     uses: docker/setup-buildx-action@v1
  #     id: buildx
    
  #   - name: Checkout Code
  #     uses: actions/checkout@v2

  #   - name: Restore db cache
  #     uses: actions/cache@v2
  #     with:
  #       path: ${{ env.DB_CACHE_PATH }}
  #       key: ${{ runner.os }}-buildx-db-${{ github.sha }}
  #       restore-keys: |
  #         ${{ runner.os }}-buildx-db-

  #   - name: Build DB
  #     uses: docker/build-push-action@v2
  #     with:
  #       builder: ${{ steps.buildx.outputs.name }}
  #       file: Dockerfile.postgres
  #       load: true
  #       cache-from: type=local,src=${{ env.DB_CACHE_PATH }}
  #       cache-to: type=local,mode=max,dest=${{ env.DB_CACHE_PATH }}
  #       tags: ${{ env.DB_IMAGE_TAG }}

  #   - name: Login to GitHub Container Registry
  #     uses: docker/login-action@v1
  #     with:
  #       registry: ghcr.io
  #       username: ${{ github.repository_owner }}
  #       password: ${{ secrets.DOCKER_PAT }}
    
  #   - name: Pull build
  #     run: docker pull ${{ env.BUILD_IMAGE }}

  #   - name: Run Tests
  #     run: |
  #       API_IMAGE_TAG=${{ env.BUILD_IMAGE }} DB_IMAGE_TAG=${{ env.DB_IMAGE_TAG }} docker-compose -f docker-compose.yml --env-file .env.ci run test-api sh -c "./scripts/wait-for test-db:5432 && npm run test"
  
  # lint:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout Code
  #     uses: actions/checkout@v2

  #   - name: Login to GitHub Container Registry
  #     uses: docker/login-action@v1
  #     with:
  #       registry: ghcr.io
  #       username: ${{ github.repository_owner }}
  #       password: ${{ secrets.DOCKER_PAT }}
    
  #   - name: Pull build
  #     run: docker pull ${{ env.BUILD_IMAGE }}

  #   - name: Run lint
  #     run: |
  #       API_IMAGE_TAG=${{ env.BUILD_IMAGE }} docker-compose -f docker-compose.yml --env-file .env.ci run --no-deps test-api sh -c "npm run lint"

  # release:
  #   runs-on: ubuntu-latest
  #   needs: [test, lint]
  #   steps:
  #   - name: Checkout Code
  #     uses: actions/checkout@v2

  #   - name: Builder
  #     uses: docker/setup-buildx-action@v1
  #     id: buildx

  #   - name: Restore build cache
  #     uses: actions/cache@v2
  #     with:
  #       path: ${{ env.MAIN_CACHE_PATH }}
  #       key: ${{ runner.os }}-buildx-main-${{ github.sha }}
  #       restore-keys: |
  #         ${{ runner.os }}-buildx-main-
    
  #   - name: Prepare
  #     id: prep
  #     run: |
  #       DOCKER_IMAGE=ghcr.io/${{ github.repository }}
  #       SHA="sha-${GITHUB_SHA::8}"
  #       UNIQUE_TAG="$DOCKER_IMAGE:$SHA"
  #       if [[ $GITHUB_REF == refs/pull/* ]]; then
  #         TAGS="$DOCKER_IMAGE:pr-${{ github.event.number }}-$SHA"
  #       else
  #         TAGS="$DOCKER_IMAGE:latest,$DOCKER_IMAGE:$SHA"
  #       fi
  #       echo ::set-output name=image::${TAGS}
  #       echo ::set-output name=unique_tag::${UNIQUE_TAG}

  #   - name: Login to GitHub Container Registry
  #     uses: docker/login-action@v1
  #     with:
  #       registry: ghcr.io
  #       username: ${{ github.repository_owner }}
  #       password: ${{ secrets.DOCKER_PAT }}

  #   - name: Build source
  #     uses: docker/build-push-action@v2
  #     with:
  #       builder: ${{ steps.buildx.outputs.name }}
  #       target: release
  #       push: true
  #       cache-from: type=local,src=${{ env.MAIN_CACHE_PATH }}
  #       cache-to: type=local,mode=max,dest=${{ env.MAIN_CACHE_PATH }}
  #       tags: ${{ steps.prep.outputs.image }}

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: us-east-1
    
  #   - name: Fill in the new image ID in the Amazon ECS task definition
  #     id: task-def
  #     uses: aws-actions/amazon-ecs-render-task-definition@v1
  #     with:
  #       task-definition: task-definition.json
  #       container-name: api
  #       image: ${{ steps.prep.outputs.unique_tag }}

  #   - name: Deploy Amazon ECS task definition
  #     uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #     with:
  #       task-definition: ${{ steps.task-def.outputs.task-definition }}
  #       service: stage-fargate-StageAPIServiceCCAE641B-H0ZOcZPVUJXa
  #       cluster: stage-fargate-StageAPIClusterB46E4A8B-5xJJR4vnME5f
  #       wait-for-service-stability: true
  